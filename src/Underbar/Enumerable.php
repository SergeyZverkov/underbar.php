<?php
use Underbar\Lazy as _;
namespace Underbar;
trait Enumerable{
function each($a){return _::each($this,$a);}
function map($a){return _::map($this,$a);}
function collect($a){return _::collect($this,$a);}
function reduce($a,$b){return _::reduce($this,$a,$b);}
function inject($a,$b){return _::inject($this,$a,$b);}
function foldl($a,$b){return _::foldl($this,$a,$b);}
function reduceRight($a,$b){return _::reduceRight($this,$a,$b);}
function foldr($a,$b){return _::foldr($this,$a,$b);}
function scanl($a,$b){return _::scanl($this,$a,$b);}
function scanr($a,$b){return _::scanr($this,$a,$b);}
function find($a){return _::find($this,$a);}
function detect($a){return _::detect($this,$a);}
function filter($a){return _::filter($this,$a);}
function select($a){return _::select($this,$a);}
function where($a){return _::where($this,$a);}
function findWhere($a){return _::findWhere($this,$a);}
function reject($a){return _::reject($this,$a);}
function every($a=NULL){return _::every($this,$a);}
function all($a=NULL){return _::all($this,$a);}
function some($a=NULL){return _::some($this,$a);}
function any($a=NULL){return _::any($this,$a);}
function contains($a){return _::contains($this,$a);}
function invoke($a,$b=NULL,$c=NULL,$d=NULL,$e=NULL,$f=NULL,$g=NULL,$h=NULL,$i=NULL,$j=NULL){return _::invoke($this,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j);}
function pluck($a){return _::pluck($this,$a);}
function max($a=NULL){return _::max($this,$a);}
function min($a=NULL){return _::min($this,$a);}
function sum(){return _::sum($this);}
function product(){return _::product($this);}
function sortBy($a){return _::sortBy($this,$a);}
function groupBy($a=NULL,$b=false){return _::groupBy($this,$a,$b);}
function countBy($a=NULL,$b=false){return _::countBy($this,$a,$b);}
function shuffle(){return _::shuffle($this);}
function toArray(){return _::toArray($this);}
function toList(){return _::toList($this);}
function memoize(){return _::memoize($this);}
function size(){return _::size($this);}
function first($a=NULL,$b=NULL){return _::first($this,$a,$b);}
function head($a=NULL,$b=NULL){return _::head($this,$a,$b);}
function take($a=NULL,$b=NULL){return _::take($this,$a,$b);}
function initial($a=1,$b=NULL){return _::initial($this,$a,$b);}
function last($a=NULL,$b=NULL){return _::last($this,$a,$b);}
function rest($a=1,$b=NULL){return _::rest($this,$a,$b);}
function tail($a=1,$b=NULL){return _::tail($this,$a,$b);}
function drop($a=1,$b=NULL){return _::drop($this,$a,$b);}
function takeWhile($a){return _::takeWhile($this,$a);}
function dropWhile($a){return _::dropWhile($this,$a);}
function compact(){return _::compact($this);}
function flatten($a=false){return _::flatten($this,$a);}
function without($a=NULL,$b=NULL,$c=NULL,$d=NULL,$e=NULL,$f=NULL,$g=NULL,$h=NULL,$i=NULL,$j=NULL){return _::without($this,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j);}
function union($a=NULL,$b=NULL,$c=NULL,$d=NULL,$e=NULL,$f=NULL,$g=NULL,$h=NULL,$i=NULL,$j=NULL){return _::union($this,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j);}
function intersection($a=NULL,$b=NULL,$c=NULL,$d=NULL,$e=NULL,$f=NULL,$g=NULL,$h=NULL,$i=NULL,$j=NULL){return _::intersection($this,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j);}
function difference($a=NULL,$b=NULL,$c=NULL,$d=NULL,$e=NULL,$f=NULL,$g=NULL,$h=NULL,$i=NULL,$j=NULL){return _::difference($this,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j);}
function uniq($a=false,$b=NULL){return _::uniq($this,$a,$b);}
function unique($a=false,$b=NULL){return _::unique($this,$a,$b);}
function zip($a=NULL,$b=NULL,$c=NULL,$d=NULL,$e=NULL,$f=NULL,$g=NULL,$h=NULL,$i=NULL,$j=NULL){return _::zip($this,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j);}
function zipWith($a=NULL,$b=NULL,$c=NULL,$d=NULL,$e=NULL,$f=NULL,$g=NULL,$h=NULL,$i=NULL,$j=NULL){return _::zipWith($this,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j);}
function unzip($a=NULL,$b=NULL,$c=NULL,$d=NULL,$e=NULL,$f=NULL,$g=NULL,$h=NULL,$i=NULL,$j=NULL){return _::unzip($this,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j);}
function span($a){return _::span($this,$a);}
function object($a=NULL){return _::object($this,$a);}
function indexOf($a,$b=0){return _::indexOf($this,$a,$b);}
function lastIndexOf($a,$b=NULL){return _::lastIndexOf($this,$a,$b);}
function sortedIndex($a,$b=NULL){return _::sortedIndex($this,$a,$b);}
function range($a=NULL,$b=1){return _::range($this,$a,$b);}
function cycle($a=NULL){return _::cycle($this,$a);}
function repeat($a=-1){return _::repeat($this,$a);}
function iterate($a){return _::iterate($this,$a);}
function pop(){return _::pop($this);}
function push($a=NULL,$b=NULL,$c=NULL,$d=NULL,$e=NULL,$f=NULL,$g=NULL,$h=NULL,$i=NULL,$j=NULL){return _::push($this,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j);}
function reverse(){return _::reverse($this);}
function shift(){return _::shift($this);}
function sort($a=NULL){return _::sort($this,$a);}
function splice($a,$b,$c=NULL,$d=NULL,$e=NULL,$f=NULL,$g=NULL,$h=NULL,$i=NULL,$j=NULL){return _::splice($this,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j);}
function unshift($a=NULL,$b=NULL,$c=NULL,$d=NULL,$e=NULL,$f=NULL,$g=NULL,$h=NULL,$i=NULL,$j=NULL){return _::unshift($this,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j);}
function concat($a=NULL,$b=NULL,$c=NULL,$d=NULL,$e=NULL,$f=NULL,$g=NULL,$h=NULL,$i=NULL,$j=NULL){return _::concat($this,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j);}
function join($a=','){return _::join($this,$a);}
function slice($a,$b=NULL){return _::slice($this,$a,$b);}
function keys(){return _::keys($this);}
function values(){return _::values($this);}
function pairs(){return _::pairs($this);}
function invert(){return _::invert($this);}
function extend($a=NULL,$b=NULL,$c=NULL,$d=NULL,$e=NULL,$f=NULL,$g=NULL,$h=NULL,$i=NULL,$j=NULL){return _::extend($this,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j);}
function pick($a=NULL,$b=NULL,$c=NULL,$d=NULL,$e=NULL,$f=NULL,$g=NULL,$h=NULL,$i=NULL,$j=NULL){return _::pick($this,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j);}
function omit($a=NULL,$b=NULL,$c=NULL,$d=NULL,$e=NULL,$f=NULL,$g=NULL,$h=NULL,$i=NULL,$j=NULL){return _::omit($this,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j);}
function defaults($a=NULL,$b=NULL,$c=NULL,$d=NULL,$e=NULL,$f=NULL,$g=NULL,$h=NULL,$i=NULL,$j=NULL){return _::defaults($this,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j);}
function tap($a){return _::tap($this,$a);}
function isArray(){return _::isArray($this);}
function isTraversable(){return _::isTraversable($this);}
function parMap($a,$b=NULL,$c=NULL){return _::parMap($this,$a,$b,$c);}
function chain(){return _::chain($this);}
}