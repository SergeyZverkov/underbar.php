<?php
namespace Underbar;
trait Enumerable{
function each($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::each($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function map($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::map($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function collect($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::collect($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function mapKey($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::mapKey($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function collectKey($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::collectKey($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function parallelMap($_1,$_2=1,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::parallelMap($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function parallelCollect($_1,$_2=1,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::parallelCollect($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function reduce($_1,$_2,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::reduce($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function inject($_1,$_2,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::inject($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function foldl($_1,$_2,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::foldl($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function reduceRight($_1,$_2,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::reduceRight($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function foldr($_1,$_2,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::foldr($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function find($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::find($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function detect($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::detect($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function findSafe($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::findSafe($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function detectSafe($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::detectSafe($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function filter($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::filter($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function select($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::select($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function where($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::where($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function findWhere($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::findWhere($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function findWhereSafe($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::findWhereSafe($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function reject($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::reject($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function every($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::every($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function all($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::all($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function some($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::some($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function any($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::any($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function sum($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::sum($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function product($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::product($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function contains($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::contains($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function invoke($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::invoke($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function pluck($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::pluck($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function max($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::max($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function min($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::min($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function sortBy($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::sortBy($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function groupBy($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::groupBy($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function countBy($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::countBy($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function shuffle($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::shuffle($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function toArray($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::toArray($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function size($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::size($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function index($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::index($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function indexSafe($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::indexSafe($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function span($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::span($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function first($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::first($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function head($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::head($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function take($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::take($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function firstSafe($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::firstSafe($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function headSafe($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::headSafe($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function takeSafe($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::takeSafe($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function takeWhile($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::takeWhile($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function initial($_1=1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::initial($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function last($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::last($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function lastSafe($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::lastSafe($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function rest($_1=1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::rest($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function tail($_1=1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::tail($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function drop($_1=1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::drop($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function dropWhile($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::dropWhile($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function compact($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::compact($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function flatten($_1=false,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::flatten($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function without($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::without($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function union($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::union($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function difference($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::difference($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function uniq($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::uniq($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function unique($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::unique($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function zip($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::zip($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function zipWith($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::zipWith($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function object($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::object($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function indexOf($_1,$_2=0,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::indexOf($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function lastIndexOf($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::lastIndexOf($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function sortedIndex($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::sortedIndex($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function range($_1=NULL,$_2=1,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::range($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function cycle($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::cycle($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function repeat($_1=-1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::repeat($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function iterate($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::iterate($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function pop($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::pop($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function push($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::push($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function reverse($_1=false,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::reverse($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function shift($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::shift($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function sort($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::sort($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function splice($_1,$_2,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::splice($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function unshift($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::unshift($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function concat($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::concat($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function join($_1=',',$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::join($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function slice($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::slice($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function keys($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::keys($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function values($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::values($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function pairs($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::pairs($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function invert($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::invert($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function extend($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::extend($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function pick($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::pick($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function omit($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::omit($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function defaults($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::defaults($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function tap($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::tap($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function duplicate($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::duplicate($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function has($_1,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::has($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function isArray($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::isArray($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function isTraversable($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::isTraversable($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
function chain($_1=NULL,$_2=NULL,$_3=NULL,$_4=NULL,$_5=NULL,$_6=NULL,$_7=NULL,$_8=NULL,$_9=NULL){return Lazy::chain($this,$_1,$_2,$_3,$_4,$_5,$_6,$_7,$_8,$_9);}
}